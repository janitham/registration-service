apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  name: postgres
  namespace: {{ include "pactbroker.namespace" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: postgres
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: postgres
        app.kubernetes.io/name: postgres
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.global.storage.role }}
                operator: Exists
      volumes:
      - name: pg-pv-storage
        persistentVolumeClaim:
          claimName: {{ .Values.global.storage.name }}
      - name: postgres-rediness-script-vol
        configMap:
          name: postgres-rediness-script
          defaultMode: 0777
      containers:
        - env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: md5
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: password
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: password
            - name: POSTGRES_DB
              value: {{ .Values.global.postgres.database }}
          image: {{ .Values.image.registry -}}/{{- .Values.image.repository -}}:{{- .Values.image.tag }}
          name: postgres
          ports:
            - containerPort: {{ .Values.global.postgres.port }}
              name: postgres
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec 
              - ./health.sh
            failureThreshold: {{ .Values.probe.rediness.failureThreshold }}
            initialDelaySeconds: {{ .Values.probe.rediness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probe.rediness.periodSeconds }}
            successThreshold: {{ .Values.probe.rediness.successThreshold }}
            timeoutSeconds: {{ .Values.probe.rediness.timeoutSeconds }}
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec 
              - pg_isready
              - --username 
              - $POSTGRES_USER
            failureThreshold: {{ .Values.probe.liveness.failureThreshold }}
            initialDelaySeconds: {{ .Values.probe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probe.liveness.periodSeconds }}
            successThreshold: {{ .Values.probe.liveness.successThreshold }}
            timeoutSeconds: {{ .Values.probe.liveness.timeoutSeconds }}
          volumeMounts:
          - mountPath: "/var/lib/postgresql/data"
            name: pg-pv-storage
          - name: postgres-rediness-script-vol
            mountPath: /health.sh
            subPath: health.sh
          